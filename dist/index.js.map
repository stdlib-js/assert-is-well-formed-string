{
  "version": 3,
  "sources": ["../lib/iswellformed.js", "../lib/primitive.js", "../lib/object.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/;\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/;\n\n\n// MAIN //\n\n/**\n* Tests if a string is a well-formed string.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a value is a well-formed string primitive\n*\n* @example\n* var bool = isWellFormed( '' );\n* // returns true\n*\n* @example\n* var bool = isWellFormed( new String( '\\uDC00' ) );\n* // returns false\n*/\nfunction isWellFormed(str) {\n\tvar i;\n\tfor ( i = 0; i < str.length; i++ ) {\n\t\t// Checking if a low surrogate is present at the beginning\n\t\tif ( i === 0 && RE_UTF16_LOW_SURROGATE.test(str[i]) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Checking if a high surrogate is present at the last position\n\t\tif ( i === str.length - 1 && RE_UTF16_HIGH_SURROGATE.test(str[i]) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Checking if there is no low surrogate after a high surrogate\n\t\tif ( i < str.length - 1 && RE_UTF16_HIGH_SURROGATE.test(str[i]) ) {\n\t\t\tif ( RE_UTF16_LOW_SURROGATE.test(str[i + 1]) ) {\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Checking if there is no high surrogate before a low surrogate\n\t\tif ( i > 0 && RE_UTF16_LOW_SURROGATE.test(str[i]) ) {\n\t\t\tif ( !RE_UTF16_HIGH_SURROGATE.test(str[i - 1]) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isWellFormed;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isWellFormed = require('./iswellformed.js');\n\n\n// MAIN //\n\n/**\n* Tests if a string is a well-formed string primitive.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string is a well-formed string primitive\n*\n* @example\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( new String( '' ) );\n* // returns false\n*/\nfunction isWellFormedString( str ) {\n\treturn (\n\t\ttypeof str === 'string' && isWellFormed( str )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isWellFormedString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require('@stdlib/assert-is-string');\nvar isWellFormed = require('./iswellformed.js');\n\n\n// MAIN //\n\n/**\n* Tests if a string is a well-formed string object.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string is a well-formed string object\n*\n* @example\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( new String( '' ) );\n* // returns true\n*/\nfunction isWellFormedString( str ) {\n\treturn (\n\t\tisString.isObject( str ) &&\n\t\tisWellFormed( str.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isWellFormedString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a string is well-formed.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating whether a string is well-formed\n*\n* @example\n* var bool = isWellFormedString( '' );\n* // returns true\n*\n* @example\n* var bool = isWellFormedString( new String( '' ) );\n* // returns true\n*\n* @example\n* var bool = isWellFormedString( '\\uDBFF' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( '\\uDBFFFF\\uDBFF' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( [] );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( '-5' );\n* // returns true\n*\n* @example\n* var bool = isWellFormedString( null );\n* // returns false\n*/\nfunction isWellFormedString( str ) {\n\treturn ( isPrimitive( str ) || isObject( str ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isWellFormedString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a string is well-formed.\n*\n* @module @stdlib/assert-is-well-formed-string\n*\n* @example\n* var isWellFormedString = require( '@stdlib/assert-is-well-formed-string' );\n*\n* var bool = isWellFormedString( '' );\n* // returns true\n*\n* bool = isWellFormedString( new String( '' ) );\n* // returns true\n*\n* bool = isWellFormedString( '\\uDBFF' );\n* // returns false\n*\n* bool = isWellFormedString( '\\uDBFFFF\\uDBFF' );\n* // returns false\n*\n* bool = isWellFormedString( [] );\n* // returns false\n*\n* bool = isWellFormedString( '-5' );\n* // returns true\n*\n* bool = isWellFormedString( null );\n* // returns false\n*\n* @example\n* // Use interface to check for well-formed string primitives...\n* var isWellFormedString = require( '@stdlib/assert-is-well-formed-string' ).isPrimitive;\n*\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* bool = isWellFormedString( new String( '' ) );\n* // returns false\n*\n* @example\n* // Use interface to check for well-formed string objects...\n* var isWellFormedString = require( '@stdlib/assert-is-well-formed-string' ).isObject;\n*\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* bool = isWellFormedString( new String( '' ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAyB,kBACzBC,EAA0B,kBAmB9B,SAASC,EAAaC,EAAK,CAC1B,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAID,EAAI,OAAQC,IAAM,CAOlC,GALKA,IAAM,GAAKJ,EAAuB,KAAKG,EAAIC,CAAC,CAAC,GAK7CA,IAAMD,EAAI,OAAS,GAAKF,EAAwB,KAAKE,EAAIC,CAAC,CAAC,EAC/D,MAAO,GAIR,GAAKA,EAAID,EAAI,OAAS,GAAKF,EAAwB,KAAKE,EAAIC,CAAC,CAAC,EAC7D,GAAKJ,EAAuB,KAAKG,EAAIC,EAAI,CAAC,CAAC,EAC1CA,GAAK,MAGL,OAAO,GAKT,GAAKA,EAAI,GAAKJ,EAAuB,KAAKG,EAAIC,CAAC,CAAC,GAC1C,CAACH,EAAwB,KAAKE,EAAIC,EAAI,CAAC,CAAC,EAC5C,MAAO,EAGV,CACA,MAAO,EACR,CAKAL,EAAO,QAAUG,IC9EjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,IAmBnB,SAASC,EAAoBC,EAAM,CAClC,OACC,OAAOA,GAAQ,UAAYF,EAAcE,CAAI,CAE/C,CAKAH,EAAO,QAAUE,IClDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAQ,0BAA0B,EAC7CC,EAAe,IAmBnB,SAASC,EAAoBC,EAAM,CAClC,OACCH,EAAS,SAAUG,CAAI,GACvBF,EAAcE,EAAI,QAAQ,CAAE,CAE9B,CAKAJ,EAAO,QAAUG,ICpDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,IACdC,EAAW,IAuCf,SAASC,EAAoBC,EAAM,CAClC,OAASH,EAAaG,CAAI,GAAKF,EAAUE,CAAI,CAC9C,CAKAJ,EAAO,QAAUG,ICGjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAc,IACdC,EAAW,IAKfH,EAAaC,EAAM,cAAeC,CAAY,EAC9CF,EAAaC,EAAM,WAAYE,CAAS,EAKxC,OAAO,QAAUF",
  "names": ["require_iswellformed", "__commonJSMin", "exports", "module", "RE_UTF16_LOW_SURROGATE", "RE_UTF16_HIGH_SURROGATE", "isWellFormed", "str", "i", "require_primitive", "__commonJSMin", "exports", "module", "isWellFormed", "isWellFormedString", "str", "require_object", "__commonJSMin", "exports", "module", "isString", "isWellFormed", "isWellFormedString", "str", "require_main", "__commonJSMin", "exports", "module", "isPrimitive", "isObject", "isWellFormedString", "str", "setReadOnly", "main", "isPrimitive", "isObject"]
}
