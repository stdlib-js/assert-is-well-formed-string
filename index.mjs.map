{"version":3,"file":"index.mjs","sources":["../lib/iswellformed.js","../lib/primitive.js","../lib/object.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/;\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/;\n\n\n// MAIN //\n\n/**\n* Tests if a string is a well-formed string.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a value is a well-formed string primitive\n*\n* @example\n* var bool = isWellFormed( '' );\n* // returns true\n*\n* @example\n* var bool = isWellFormed( new String( '\\uDC00' ) );\n* // returns false\n*/\nfunction isWellFormed(str) {\n\tvar i;\n\tfor ( i = 0; i < str.length; i++ ) {\n\t\t// Checking if a low surrogate is present at the beginning\n\t\tif ( i === 0 && RE_UTF16_LOW_SURROGATE.test(str[i]) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Checking if a high surrogate is present at the last position\n\t\tif ( i === str.length - 1 && RE_UTF16_HIGH_SURROGATE.test(str[i]) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Checking if there is no low surrogate after a high surrogate\n\t\tif ( i < str.length - 1 && RE_UTF16_HIGH_SURROGATE.test(str[i]) ) {\n\t\t\tif ( RE_UTF16_LOW_SURROGATE.test(str[i + 1]) ) {\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Checking if there is no high surrogate before a low surrogate\n\t\tif ( i > 0 && RE_UTF16_LOW_SURROGATE.test(str[i]) ) {\n\t\t\tif ( !RE_UTF16_HIGH_SURROGATE.test(str[i - 1]) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default isWellFormed;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isWellFormed from './iswellformed.js';\n\n\n// MAIN //\n\n/**\n* Tests if a string is a well-formed string primitive.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string is a well-formed string primitive\n*\n* @example\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( new String( '' ) );\n* // returns false\n*/\nfunction isWellFormedString( str ) {\n\treturn (\n\t\ttypeof str === 'string' && isWellFormed( str )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isWellFormedString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isString from '@stdlib/assert-is-string';\nimport isWellFormed from './iswellformed.js';\n\n\n// MAIN //\n\n/**\n* Tests if a string is a well-formed string object.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string is a well-formed string object\n*\n* @example\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( new String( '' ) );\n* // returns true\n*/\nfunction isWellFormedString( str ) {\n\treturn (\n\t\tisString.isObject( str ) &&\n\t\tisWellFormed( str.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isWellFormedString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a string is well-formed.\n*\n* @param {string} str - input string\n* @returns {boolean} boolean indicating whether a string is well-formed\n*\n* @example\n* var bool = isWellFormedString( '' );\n* // returns true\n*\n* @example\n* var bool = isWellFormedString( new String( '' ) );\n* // returns true\n*\n* @example\n* var bool = isWellFormedString( '\\uDBFF' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( '\\uDBFFFF\\uDBFF' );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( [] );\n* // returns false\n*\n* @example\n* var bool = isWellFormedString( '-5' );\n* // returns true\n*\n* @example\n* var bool = isWellFormedString( null );\n* // returns false\n*/\nfunction isWellFormedString( str ) {\n\treturn ( isPrimitive( str ) || isObject( str ) );\n}\n\n\n// EXPORTS //\n\nexport default isWellFormedString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a string is well-formed.\n*\n* @module @stdlib/assert-is-well-formed-string\n*\n* @example\n* import isWellFormedString from '@stdlib/assert-is-well-formed-string';\n*\n* var bool = isWellFormedString( '' );\n* // returns true\n*\n* bool = isWellFormedString( new String( '' ) );\n* // returns true\n*\n* bool = isWellFormedString( '\\uDBFF' );\n* // returns false\n*\n* bool = isWellFormedString( '\\uDBFFFF\\uDBFF' );\n* // returns false\n*\n* bool = isWellFormedString( [] );\n* // returns false\n*\n* bool = isWellFormedString( '-5' );\n* // returns true\n*\n* bool = isWellFormedString( null );\n* // returns false\n*\n* @example\n* // Use interface to check for well-formed string primitives...\n* import { isPrimitive as isWellFormedString } from '@stdlib/assert-is-well-formed-string';\n*\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* bool = isWellFormedString( new String( '' ) );\n* // returns false\n*\n* @example\n* // Use interface to check for well-formed string objects...\n* import { isObject as isWellFormedString } from '@stdlib/assert-is-well-formed-string';\n*\n* var bool = isWellFormedString( '\\uDC00' );\n* // returns false\n*\n* bool = isWellFormedString( new String( '' ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["RE_UTF16_LOW_SURROGATE","RE_UTF16_HIGH_SURROGATE","isWellFormed","str","i","length","test","isWellFormedString","isString","isObject","valueOf","isPrimitive","setReadOnly","main"],"mappings":";;mNAsBA,IAAIA,EAAyB,kBACzBC,EAA0B,kBAmB9B,SAASC,EAAaC,GACrB,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAAM,CAElC,GAAW,IAANA,GAAWJ,EAAuBM,KAAKH,EAAIC,IAC/C,OAAO,EAIR,GAAKA,IAAMD,EAAIE,OAAS,GAAKJ,EAAwBK,KAAKH,EAAIC,IAC7D,OAAO,EAIR,GAAKA,EAAID,EAAIE,OAAS,GAAKJ,EAAwBK,KAAKH,EAAIC,IAAM,CACjE,IAAKJ,EAAuBM,KAAKH,EAAIC,EAAI,IAIxC,OAAO,EAHPA,GAAK,CAKN,CAGD,GAAKA,EAAI,GAAKJ,EAAuBM,KAAKH,EAAIC,MACvCH,EAAwBK,KAAKH,EAAIC,EAAI,IAC1C,OAAO,CAGT,CACD,OAAO,CACR,CChCA,SAASG,EAAoBJ,GAC5B,MACgB,iBAARA,GAAoBD,EAAcC,EAE3C,CCHA,SAASI,EAAoBJ,GAC5B,OACCK,EAASC,SAAUN,IACnBD,EAAcC,EAAIO,UAEpB,CCeA,SAASH,EAAoBJ,GAC5B,OAASQ,EAAaR,IAASM,EAAUN,EAC1C,CCgBAS,EAAAC,EAAA,cAAAF,GACAC,EAAAC,EAAA,WAAAJ"}